version: 0.2

env:
  variables:
    AWS_ACCOUNT_ID: "579924771643"
    AWS_REGION: "ap-south-1"
    ECR_REPO_FRONTEND: "frontend"
    ECR_REPO_BACKEND: "backend"
    ECR_REPO_WEBSOCKET: "websocket"
    EKS_CLUSTER_NAME: "onedraw-cluster"
    KUBECONFIG: "/root/.kube/config"
  secrets-manager:
    DOCKERHUB_USERNAME: "your-secret-name:dockerhub-username"
    DOCKERHUB_PASSWORD: "your-secret-name:dockerhub-password"

phases:
  install:
    runtime-versions:
      docker: 20
    commands:
      - echo "Installing dependencies..."
      - yum update -y
      - yum install -y jq
      - curl -LO "https://dl.k8s.io/release/$(curl -L -s https://dl.k8s.io/release/stable.txt)/bin/linux/amd64/kubectl"
      - chmod +x kubectl
      - mv kubectl /usr/local/bin/
      - aws --version
      - kubectl version --client

  pre_build:
    commands:
      - echo "Logging in to Docker Hub..."
      - echo "$DOCKERHUB_PASSWORD" | docker login -u "$DOCKERHUB_USERNAME" --password-stdin
      - echo "Logging in to Amazon ECR..."
      - echo "$CODEBUILD_WEBHOOK_EVENT"
      - aws ecr get-login-password --region $AWS_REGION | docker login --username AWS --password-stdin $AWS_ACCOUNT_ID.dkr.ecr.$AWS_REGION.amazonaws.com
      - export IMAGE_TAG=$(echo $CODEBUILD_RESOLVED_SOURCE_VERSION | cut -c 1-7)
      - echo "Image tag will be $IMAGE_TAG"
      - echo "Configuring kubectl for EKS..."
      - aws eks update-kubeconfig --name $EKS_CLUSTER_NAME --region $AWS_REGION

  build:
    commands:
      - echo "Building Frontend Docker image..."
      - cd Frontend
      - docker build -t $AWS_ACCOUNT_ID.dkr.ecr.$AWS_REGION.amazonaws.com/$ECR_REPO_FRONTEND:$IMAGE_TAG .
      - cd ..
      - echo "Building backend Docker image..."
      - cd backend
      - docker build -t $AWS_ACCOUNT_ID.dkr.ecr.$AWS_REGION.amazonaws.com/$ECR_REPO_BACKEND:$IMAGE_TAG .
      - cd ..
      - echo "Building Websocket Docker image..."
      - cd WsServer
      - docker build -t $AWS_ACCOUNT_ID.dkr.ecr.$AWS_REGION.amazonaws.com/$ECR_REPO_WEBSOCKET:$IMAGE_TAG .
      - cd ..

  post_build:
    commands:
      - echo "Pushing Frontend Docker image to ECR..."
      - docker push $AWS_ACCOUNT_ID.dkr.ecr.$AWS_REGION.amazonaws.com/$ECR_REPO_FRONTEND:$IMAGE_TAG
      - echo "Pushing Backend Docker image to ECR..."
      - docker push $AWS_ACCOUNT_ID.dkr.ecr.$AWS_REGION.amazonaws.com/$ECR_REPO_BACKEND:$IMAGE_TAG
      - echo "Pushing Websocket Docker image to ECR..."
      - docker push $AWS_ACCOUNT_ID.dkr.ecr.$AWS_REGION.amazonaws.com/$ECR_REPO_WEBSOCKET:$IMAGE_TAG
      - echo "Build and push completed successfully!"
      - echo "Updating Kubernetes manifests with new image tags..."
      - sed -i "s|image:.*backend:.*|image: $AWS_ACCOUNT_ID.dkr.ecr.$AWS_REGION.amazonaws.com/$ECR_REPO_BACKEND:$IMAGE_TAG|g" manifest/backend-deployment.yml
      - sed -i "s|image:.*frontend:.*|image: $AWS_ACCOUNT_ID.dkr.ecr.$AWS_REGION.amazonaws.com/$ECR_REPO_FRONTEND:$IMAGE_TAG|g" manifest/frontend-deployment.yml
      - sed -i "s|image:.*websocket:.*|image: $AWS_ACCOUNT_ID.dkr.ecr.$AWS_REGION.amazonaws.com/$ECR_REPO_WEBSOCKET:$IMAGE_TAG|g" manifest/websocket-deployment.yml
      - echo "Applying updated manifests to EKS cluster..."
      - kubectl apply -f manifest/backend-deployment.yml
      - kubectl apply -f manifest/frontend-deployment.yml
      - kubectl apply -f manifest/websocket-deployment.yml
      - echo "Checking rollout status..."
      - kubectl rollout status deployment/backend --timeout=300s
      - kubectl rollout status deployment/frontend --timeout=300s
      - kubectl rollout status deployment/websocket --timeout=300s
      - echo "Deployment completed successfully!"

artifacts:
  files:
    - "**/*"
  discard-paths: no